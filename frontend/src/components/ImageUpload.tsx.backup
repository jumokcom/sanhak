import React, { useState, useRef } from 'react';
import styled from 'styled-components';

const UploadContainer = styled.div`
  display: flex;
  flex-direction: column;
  gap: 15px;
  margin: 20px 0;
`;

const UploadArea = styled.div<{ isDragOver: boolean }>`
  border: 2px dashed ${props => props.isDragOver ? '#3182ce' : '#cbd5e0'};
  border-radius: 10px;
  padding: 40px 20px;
  text-align: center;
  background-color: ${props => props.isDragOver ? '#f0f8ff' : '#f8f9fa'};
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    border-color: #3182ce;
    background-color: #f0f8ff;
  }
`;

const UploadText = styled.div`
  color: #666;
  font-size: 1rem;
  margin-bottom: 10px;
`;

const UploadButton = styled.button`
  background-color: #3182ce;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 10px 20px;
  cursor: pointer;
  
  &:hover {
    background-color: #2c5282;
  }
`;

const HiddenInput = styled.input`
  display: none;
`;

const PreviewContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  gap: 15px;
  margin-top: 15px;
`;

const PreviewItem = styled.div`
  position: relative;
  border-radius: 8px;
  overflow: hidden;
  border: 1px solid #e2e8f0;
`;

const PreviewImage = styled.img`
  width: 100%;
  height: 120px;
  object-fit: cover;
`;

const RemoveButton = styled.button`
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: rgba(255, 0, 0, 0.7);
  color: white;
  border: none;
  border-radius: 50%;
  width: 24px;
  height: 24px;
  cursor: pointer;
  font-size: 12px;
  
  &:hover {
    background-color: rgba(255, 0, 0, 0.9);
  }
`;

const LoadingOverlay = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 12px;
`;

interface ImageUploadProps {
  multiple?: boolean;
  maxFiles?: number;
  onUpload?: (imageUrls: string[]) => void;
  existingImages?: string[];
  label?: string;
}

const ImageUpload: React.FC<ImageUploadProps> = ({
  multiple = false,
  maxFiles = 5,
  onUpload,
  existingImages = [],
  label = "이미지 업로드"
}) => {
  const [selectedImages, setSelectedImages] = useState<string[]>(existingImages);
  const [isDragOver, setIsDragOver] = useState(false);
  const [uploadingFiles, setUploadingFiles] = useState<Set<string>>(new Set());
  const fileInputRef = useRef<HTMLInputElement>(null);

  // API 기본 URL
  const API_BASE_URL = process.env.NODE_ENV === 'production' 
    ? process.env.REACT_APP_API_URL || 'https://sanhak-backend.onrender.com/api'
    : 'http://localhost:3001/api';

  // 파일 선택 처리
  const handleFileSelect = (files: FileList | null) => {
    if (!files) return;

    const fileArray = Array.from(files);
    
    if (!multiple && fileArray.length > 1) {
      alert('하나의 이미지만 선택해주세요.');
      return;
    }

    if (selectedImages.length + fileArray.length > maxFiles) {
      alert(`최대 ${maxFiles}개의 이미지만 업로드할 수 있습니다.`);
      return;
    }

    fileArray.forEach(file => uploadFile(file));
  };

  // 파일 업로드
  const uploadFile = async (file: File) => {
    const formData = new FormData();
    formData.append('image', file);

    const tempId = `temp_${Date.now()}_${Math.random()}`;
    setUploadingFiles(prev => new Set([...prev, tempId]));

    try {
      const token = localStorage.getItem('jwt_token');
      const response = await fetch(`${API_BASE_URL}/portfolios/upload/image`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData,
      });

      if (!response.ok) {
        throw new Error('업로드 실패');
      }

      const result = await response.json();
      
      setSelectedImages(prev => {
        const newImages = [...prev, result.imageUrl];
        onUpload?.(newImages);
        return newImages;
      });

    } catch (error) {
      console.error('이미지 업로드 실패:', error);
      alert('이미지 업로드에 실패했습니다.');
    } finally {
      setUploadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(tempId);
        return newSet;
      });
    }
  };

  // 드래그 앤 드롭 이벤트
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    handleFileSelect(e.dataTransfer.files);
  };

  // 이미지 제거
  const removeImage = (index: number) => {
    const newImages = selectedImages.filter((_, i) => i !== index);
    setSelectedImages(newImages);
    onUpload?.(newImages);
  };

  // 파일 입력 클릭
  const handleClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <UploadContainer>
      <label>{label}</label>
      
      <UploadArea
        isDragOver={isDragOver}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        onClick={handleClick}
      >
        <UploadText>
          이미지를 드래그하거나 클릭하여 업로드
        </UploadText>
        <UploadText style={{ fontSize: '0.9rem', color: '#999' }}>
          {multiple ? `최대 ${maxFiles}개` : '1개'} · JPG, PNG, GIF (5MB 이하)
        </UploadText>
        <UploadButton type="button">
          파일 선택
        </UploadButton>
      </UploadArea>

      <HiddenInput
        ref={fileInputRef}
        type="file"
        accept="image/*"
        multiple={multiple}
        onChange={(e) => handleFileSelect(e.target.files)}
      />

      {selectedImages.length > 0 && (
        <PreviewContainer>
          {selectedImages.map((image, index) => (
            <PreviewItem key={index}>
              <PreviewImage src={image} alt={`미리보기 ${index + 1}`} />
              <RemoveButton onClick={() => removeImage(index)}>
                ×
              </RemoveButton>
            </PreviewItem>
          ))}
          {Array.from(uploadingFiles).map(tempId => (
            <PreviewItem key={tempId}>
              <LoadingOverlay>업로드 중...</LoadingOverlay>
            </PreviewItem>
          ))}
        </PreviewContainer>
      )}
    </UploadContainer>
  );
};

export default ImageUpload;
